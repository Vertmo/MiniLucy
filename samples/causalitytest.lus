node test_op() returns (z : int);
let
  z = 1 + 2; -- z + z fails;
tel;
  
node test_fby() returns (z : int);
let
  z = 1 fby (1 + z);
tel;
  
node test_multiple() returns (x : int; y : int; z : int);
let
  z = y;
  y = x;
  x = 1 fby z; -- x = z fails
tel;
  
node test_clock() returns (x : bool; y : int when True(x); z : int);
let
  y = 0 when True(x);
  z = merge x (True -> y) (False -> 1 when False(x));
  x = false fby (z < 1); -- (z < 1) fails
tel;
  
node test_example(c : bool; x : int) 
returns (z : int when True(c); o : int);
let
  z = (((4 fby o)) when True(c));
  o = merge c (True -> (1 fby (z + (1 when True(c))))) 
              (False -> (2 fby x) when False(c));
tel;