node test_op() returns (z : int);
let
  z = 1 + 2; -- z + z fails;
tel;
  
node test_fby() returns (z : int);
let
  z = 1 fby (1 + z);
tel;
  
node test_multiple() returns (x : int; y : int; z : int);
let
  z = y;
  y = x;
  x = 1 fby z; -- x = z fails
tel;
  
node test_clock() returns (x : bool; y : int when x; z : int);
let
  y = 0 when x;
  z = merge x (y) (1 when not x);
  x = false fby (z < 1); -- (z < 1) fails
tel;
  
node test_example(c : bool; k : int when c; x : int) returns (z : int when c; o : int);
let
  z = (((4 fby o) * 3) when c) + k;
  o = merge c ((5 fby (z + (1 when c))) + (2 when c)) 
  ((6 fby x) when not c);
tel;