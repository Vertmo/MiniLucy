type $aut1 = CHRONO;
type $aut2 = STOP + START;
type $aut3 = TIME + LAP;
node rising_edge(e:(bool when .)) returns (rising:(bool when .));
var $243:(bool when .);
let
  rising = (and [e; (not [$243])]);
  $243 = true fby e;
tel

node main(StSt:(bool when .); Rst:(bool when .)) returns (disp_1:(int when .); disp_2:(int when .));
var s:(int when .); m:(int when .); run:(bool when .); $s50:($aut1 when .); $ns52:($aut1 when .); $pns54:($aut1 when .); $r51:(bool when .); $nr53:(bool when .); $pnr55:(bool when .); $s43:($aut2 when (. on CHRONO($aut1))); $ns45:($aut2 when (. on CHRONO($aut1))); $pns47:($aut2 when (. on CHRONO($aut1))); $r44:(bool when (. on CHRONO($aut1))); $nr46:(bool when (. on CHRONO($aut1))); $pnr48:(bool when (. on CHRONO($aut1))); $s57:($aut3 when .); $ns59:($aut3 when .); $pns61:($aut3 when .); $r58:(bool when .); $nr60:(bool when .); $pnr62:(bool when .); $saut49:($aut1 when .); $s50$90:($aut1 when (. on CHRONO($saut49))); $r51$91:(bool when (. on CHRONO($saut49))); $aut1:($aut1 when .); $saut42:($aut2 when (. on CHRONO($aut1))); $s43$96:($aut2 when ((. on CHRONO($aut1)) on STOP($saut42))); $r44$97:(bool when ((. on CHRONO($aut1)) on STOP($saut42))); $s43$102:($aut2 when ((. on CHRONO($aut1)) on START($saut42))); $r44$103:(bool when ((. on CHRONO($aut1)) on START($saut42))); $aut2:($aut2 when (. on CHRONO($aut1))); s$108:(int when (. on STOP($aut2))); m$109:(int when (. on STOP($aut2))); run$110:(bool when (. on STOP($aut2))); $ns45$111:($aut2 when ((. on CHRONO($aut1)) on STOP($aut2))); $nr46$112:(bool when ((. on CHRONO($aut1)) on STOP($aut2))); s$117:(int when (. on START($aut2))); m$118:(int when (. on START($aut2))); run$119:(bool when (. on START($aut2))); $ns45$120:($aut2 when ((. on CHRONO($aut1)) on START($aut2))); $nr46$121:(bool when ((. on CHRONO($aut1)) on START($aut2))); s$136:(int when (. on CHRONO($aut1))); m$137:(int when (. on CHRONO($aut1))); run$138:(bool when (. on CHRONO($aut1))); $ns52$139:($aut1 when (. on CHRONO($aut1))); $nr53$140:(bool when (. on CHRONO($aut1))); $saut56:($aut3 when .); $s57$158:($aut3 when (. on TIME($saut56))); $r58$159:(bool when (. on TIME($saut56))); $s57$177:($aut3 when (. on LAP($saut56))); $r58$178:(bool when (. on LAP($saut56))); $aut3:($aut3 when .); disp_1$194:(int when (. on TIME($aut3))); disp_2$195:(int when (. on TIME($aut3))); $ns59$196:($aut3 when (. on TIME($aut3))); $nr60$197:(bool when (. on TIME($aut3))); disp_1$213:(int when (. on LAP($aut3))); disp_2$214:(int when (. on LAP($aut3))); $ns59$215:($aut3 when (. on LAP($aut3))); $nr60$216:(bool when (. on LAP($aut3))); $pnr55$83$217:(bool when .); $r51$128$229:(bool when .); StSt$122$228:(bool when .); $68$227:(bool when (. on CHRONO($aut1))); $pnr48$95$219:(bool when (. on CHRONO($aut1))); $64$218:(bool when ((. on CHRONO($aut1)) on STOP($saut42))); $pnr48$101$221:(bool when (. on CHRONO($aut1))); $65$220:(bool when ((. on CHRONO($aut1)) on START($saut42))); $r44$106$223:(bool when (. on CHRONO($aut1))); $66$222:(bool when ((. on CHRONO($aut1)) on STOP($aut2))); $r44$115$226:(bool when (. on CHRONO($aut1))); $67$225:(bool when ((. on CHRONO($aut1)) on START($aut2))); d$224:(int when ((. on CHRONO($aut1)) on START($aut2))); $pnr62$157$230:(bool when .); $pnr62$176$231:(bool when .); $r58$192$237:(bool when .); run$183$236:(bool when .); m$182$235:(int when .); s$181$234:(int when .); Rst$180$233:(bool when .); $71$232:(bool when (. on TIME($aut3))); $r58$211$242:(bool when .); m$201$241:(int when .); s$200$240:(int when .); Rst$199$239:(bool when .); $72$238:(bool when (. on LAP($aut3))); $244:($aut1 when .); $245:(bool when .); $246:($aut2 when (. on CHRONO($aut1))); $247:(bool when (. on CHRONO($aut1))); $10:(bool when ((. on CHRONO($aut1)) on STOP($aut2))); $17:(bool when ((. on CHRONO($aut1)) on START($aut2))); $248:(int when ((. on CHRONO($aut1)) on STOP($aut2))); $249:(int when ((. on CHRONO($aut1)) on STOP($aut2))); $250:(int when ((. on CHRONO($aut1)) on START($aut2))); $251:(int when ((. on CHRONO($aut1)) on START($aut2))); $252:(int when ((. on CHRONO($aut1)) on START($aut2))); $253:(int when ((. on CHRONO($aut1)) on START($aut2))); $254:(int when ((. on CHRONO($aut1)) on START($aut2))); $255:(int when ((. on CHRONO($aut1)) on START($aut2))); $256:(int when ((. on CHRONO($aut1)) on START($aut2))); $257:(int when ((. on CHRONO($aut1)) on START($aut2))); $258:(int when ((. on CHRONO($aut1)) on START($aut2))); $259:(int when ((. on CHRONO($aut1)) on START($aut2))); $260:(int when ((. on CHRONO($aut1)) on START($aut2))); $261:(int when ((. on CHRONO($aut1)) on START($aut2))); $262:($aut3 when .); $263:(bool when .); $36:(bool when (. on TIME($aut3))); $40:(bool when (. on LAP($aut3))); $264:(int when (. on LAP($aut3))); $265:(int when (. on LAP($aut3))); $266:(bool when ((. on CHRONO($aut1)) on STOP($aut2))); $267:(bool when ((. on CHRONO($aut1)) on START($aut2))); $268:(bool when (. on TIME($aut3))); $269:(bool when (. on LAP($aut3))); $270:(bool when (. on LAP($aut3))); $271:(int when (. on LAP($aut3))); $272:(bool when (. on LAP($aut3))); $273:(int when (. on LAP($aut3)));
let
  $pns54 = $244;
  $244 = CHRONO fby $ns52;
  $pnr55 = $245;
  $245 = false fby $nr53;
  $saut49 = $pns54;
  $s50 = merge $saut49 (CHRONO -> $s50$90);
  $r51 = merge $saut49 (CHRONO -> $r51$91);
  $pnr55$83$217 = $pnr55 when CHRONO($saut49);
  $s50$90 = CHRONO;
  $r51$91 = $pnr55$83$217;
  $aut1 = $s50;
  s = merge $aut1 (CHRONO -> s$136);
  m = merge $aut1 (CHRONO -> m$137);
  run = merge $aut1 (CHRONO -> run$138);
  $ns52 = merge $aut1 (CHRONO -> $ns52$139);
  $nr53 = merge $aut1 (CHRONO -> $nr53$140);
  $r51$128$229 = $r51 when CHRONO($aut1);
  StSt$122$228 = StSt when CHRONO($aut1);
  $68$227 = $r51$128$229;
  $ns52$139 = CHRONO;
  $nr53$140 = false;
  $pns47 = match $68$227 (True -> STOP) (False -> $246);
  $246 = STOP fby $ns45;
  $pnr48 = match $68$227 (True -> false) (False -> $247);
  $247 = false fby $nr46;
  $saut42 = $pns47;
  $s43 = merge $saut42 (STOP -> $s43$96) (START -> $s43$102);
  $r44 = merge $saut42 (STOP -> $r44$97) (START -> $r44$103);
  $pnr48$95$219 = $pnr48 when STOP($saut42);
  $64$218 = $pnr48$95$219;
  $s43$96 = match $10 (False -> STOP) (True -> START);
  $r44$97 = match $10 (False -> $pnr48$95$219) (True -> false);
  $266 = (or [(or [false; $64$218]); $68$227]);
  ($10) = rising_edge(StSt$122$228) every $266;
  $pnr48$101$221 = $pnr48 when START($saut42);
  $65$220 = $pnr48$101$221;
  $s43$102 = match $17 (False -> START) (True -> STOP);
  $r44$103 = match $17 (False -> $pnr48$101$221) (True -> false);
  $267 = (or [(or [false; $65$220]); $68$227]);
  ($17) = rising_edge(StSt$122$228) every $267;
  $aut2 = $s43;
  s$136 = merge $aut2 (STOP -> s$108) (START -> s$117);
  m$137 = merge $aut2 (STOP -> m$109) (START -> m$118);
  run$138 = merge $aut2 (STOP -> run$110) (START -> run$119);
  $ns45 = merge $aut2 (STOP -> $ns45$111) (START -> $ns45$120);
  $nr46 = merge $aut2 (STOP -> $nr46$112) (START -> $nr46$121);
  $r44$106$223 = $r44 when STOP($aut2);
  $66$222 = $r44$106$223;
  $ns45$111 = STOP;
  $nr46$112 = false;
  s$108 = match $66$222 (True -> 0 when CHRONO($aut1) when STOP($aut2)) (False -> match $68$227 (True -> 0 when CHRONO($aut1) when STOP($aut2)) (False -> $248));
  $248 = 0 fby s$108;
  m$109 = match $66$222 (True -> 0 when CHRONO($aut1) when STOP($aut2)) (False -> match $68$227 (True -> 0 when CHRONO($aut1) when STOP($aut2)) (False -> $249));
  $249 = 0 fby m$109;
  run$110 = false when CHRONO($aut1) when STOP($aut2);
  $r44$115$226 = $r44 when START($aut2);
  $67$225 = $r44$115$226;
  $ns45$120 = START;
  $nr46$121 = false;
  d$224 = (mod [(+ [$251; 1 when CHRONO($aut1) when START($aut2)]); 100 when CHRONO($aut1) when START($aut2)]);
  $251 = match $67$225 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> match $68$227 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> $250));
  $250 = 0 fby d$224;
  s$117 = match (< [d$224; $253]) (False -> match $67$225 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> match $68$227 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> $254))) (True -> (mod [(+ [$256; 1 when CHRONO($aut1) when START($aut2)]); 60 when CHRONO($aut1) when START($aut2)]));
  $253 = match $67$225 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> match $68$227 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> $252));
  $252 = 0 fby d$224;
  $254 = 0 fby s$117;
  $256 = match $67$225 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> match $68$227 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> $255));
  $255 = 0 fby s$117;
  m$118 = match (< [s$117; $258]) (False -> match $67$225 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> match $68$227 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> $259))) (True -> (mod [(+ [$261; 1 when CHRONO($aut1) when START($aut2)]); 60 when CHRONO($aut1) when START($aut2)]));
  $258 = match $67$225 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> match $68$227 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> $257));
  $257 = 0 fby s$117;
  $259 = 0 fby m$118;
  $261 = match $67$225 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> match $68$227 (True -> 0 when CHRONO($aut1) when START($aut2)) (False -> $260));
  $260 = 0 fby m$118;
  run$119 = true when CHRONO($aut1) when START($aut2);
  $pns61 = $262;
  $262 = TIME fby $ns59;
  $pnr62 = $263;
  $263 = false fby $nr60;
  $saut56 = $pns61;
  $s57 = merge $saut56 (TIME -> $s57$158) (LAP -> $s57$177);
  $r58 = merge $saut56 (TIME -> $r58$159) (LAP -> $r58$178);
  $pnr62$157$230 = $pnr62 when TIME($saut56);
  $s57$158 = TIME;
  $r58$159 = $pnr62$157$230;
  $pnr62$176$231 = $pnr62 when LAP($saut56);
  $s57$177 = LAP;
  $r58$178 = $pnr62$176$231;
  $aut3 = $s57;
  disp_1 = merge $aut3 (TIME -> disp_1$194) (LAP -> disp_1$213);
  disp_2 = merge $aut3 (TIME -> disp_2$195) (LAP -> disp_2$214);
  $ns59 = merge $aut3 (TIME -> $ns59$196) (LAP -> $ns59$215);
  $nr60 = merge $aut3 (TIME -> $nr60$197) (LAP -> $nr60$216);
  $r58$192$237 = $r58 when TIME($aut3);
  run$183$236 = run when TIME($aut3);
  m$182$235 = m when TIME($aut3);
  s$181$234 = s when TIME($aut3);
  Rst$180$233 = Rst when TIME($aut3);
  $71$232 = $r58$192$237;
  $ns59$196 = match (and [$36; run$183$236]) (False -> TIME) (True -> LAP);
  $nr60$197 = match (and [$36; run$183$236]) (False -> false) (True -> true);
  $268 = (or [false; $71$232]);
  ($36) = rising_edge(Rst$180$233) every $268;
  disp_1$194 = s$181$234;
  disp_2$195 = m$182$235;
  $r58$211$242 = $r58 when LAP($aut3);
  m$201$241 = m when LAP($aut3);
  s$200$240 = s when LAP($aut3);
  Rst$199$239 = Rst when LAP($aut3);
  $72$238 = $r58$211$242;
  $ns59$215 = match $40 (False -> LAP) (True -> TIME);
  $nr60$216 = match $40 (False -> false) (True -> true);
  $269 = (or [false; $72$238]);
  ($40) = rising_edge(Rst$199$239) every $269;
  disp_1$213 = match $72$238 (True -> s$200$240) (False -> $264);
  $270 = true fby false when LAP($aut3);
  $271 = 0 fby disp_1$213;
  $264 = match $270 (True -> s$200$240) (False -> $271);
  disp_2$214 = match $72$238 (True -> m$201$241) (False -> $265);
  $272 = true fby false when LAP($aut3);
  $273 = 0 fby disp_2$214;
  $265 = match $272 (True -> m$201$241) (False -> $273);
tel

