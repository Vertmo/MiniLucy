node test_when(b : bool; c : bool when b) returns (z : int when c);
let
  z = 1 when c;
tel;
  
node test_when_not(b : bool) returns (z : int when not b);
let
  z = 1 when not b;
tel;
  
node test_op(b : bool) returns (z : int when b);
var x : int when b; y : int when b;
let
  x = 1 when b; y = 2 when b;
  z = x + y;
tel;
  
node test_tuple(b : bool; c : bool) returns (x : int when b; y : int when c);
let
  (x, y) = (1 when b, 2 when c);
tel;
  
node test_fby(b : bool) returns (x : int when b);
let
  x = 1 fby x;
tel;
  
node test_merge(b : bool) returns (x : int);
var t1 : int when b; t2 : int when not b;
let
  t1 = 1 when b;
  t2 = 2 when not b;
  x = merge b t1 t2;
tel;
  
node test_app(b1 : bool; c1 : bool when b1) returns (z : int when c1);
let
  z = test_when(b1, c1);
tel;
  
node test_app2(b1 : bool; b2 : bool; c1 : bool when b1) returns (z : int when c1);
let
  z = test_when(b1, c1) every b2;
tel;