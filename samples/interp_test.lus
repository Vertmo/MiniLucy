type t1 = A + B + C;

node test_const() returns (x : int);
let
  x = 3;
tel
  
node test_id1(x : int) returns (y : int);
let
  y = x;
tel
  
node test_id2(x : int) returns (y : int);
var z : int;
let
  y = z;
  z = x;
tel
  
node test_idbad(x : int) returns (y : int);
var z : int;
let
  y = z; (* causality error *)
  z = y;
tel
  
node test_op(x : int; y : int) returns (z : int; b : bool);
let
  z = -(x + y) / 2;
  b = x < y;
tel
  
node test_fby(xinit : int) returns (x : int);
let
  x = 0 fby (x + (1 fby x));
tel
  
node test_arrow() returns (x : int);
let
  x = 0 -> 1;
tel
  
node test_app1() returns (b : bool);
let
  b = test_fby(0) > 10;
tel
  
node test_reset() returns (x : int);
let
  x = test_fby(0) every ((0 fby x) > 10);
tel
  
node test_when() returns (b : bool; x : int when b);
let
  b = true fby (not b);
  x = 42 when b;
tel
  
node test_when_fby(b : bool) returns (x : int; y : int when b);
let
  (x, y) = (0, 0) fby (x + 1, y + 1);
tel
  
node test_if(b : bool) returns (x : int);
let
  x = if b then 1 else 0;
tel
  
node test_merge(c : t1) returns (x : int);
let
  x = merge c (A -> 0) (B -> 1) (C -> 2);
tel
  
node test_if_ck(b : bool) returns (x : int);
var b1 : bool; x1 : int when b1;
let
  b1 = false;
  x1 = if true then 1 else 0;
  x = merge b1 x1 2;
tel

node test_tuple() returns (x : int; y : int);
let
  (x, y) = (41, x+1);
tel
  
node test_tuple2() returns (x : int; y : int);
let
  (x, y) = (0 fby y, x+1);
tel
  
node clocked_input(y : bool when x; x : bool; z : int when y)
returns (t : bool when y)
let
  t = z < 50;
tel