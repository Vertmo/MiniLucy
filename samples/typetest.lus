node test_const() returns (y : int);
let
  y = 1;
tel;
  
node test_id(x : int) returns (y : int);
let
  y = x;
tel;
  
node test_op(x : int) returns (y : bool);
let
  y = x < (x*2-20);
tel;
  
node test_node(x : bool; y : int) returns (z : bool);
let
  z = test_op(y) or false;
tel;
  
node test_node2(x : int; y : bool) returns (z : int);
let
  z = if test_node(y,x) then 1 else 0;
tel;
  
node test_fby(dummy : bool) returns (z : int);
let
  z = 0 fby (z + (1 fby z));
tel;
  
node test_tuple(dummy : bool) returns (i:int; b:bool; r:real);
let
  (r, b, i) = (1.0, true, 42);
tel;
  
node test_when(b : bool) returns (d:int when True(b));
let
  d = 1 when True(b);
tel;
  
node test_merge(b : bool; c : int) returns (e:int);
let
  e = merge b (True -> c when True(b)) (False -> c when False(b));
tel;
  
node test_every(b : bool) returns (e : int);
let
  e = test_fby(false) every b;
tel;
  
node test_app() returns (i : int);
var r:real; b:bool;
let
  (i, b, r) = test_tuple(false);
tel;