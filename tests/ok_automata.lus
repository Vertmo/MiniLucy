node auto_weird(b : bool) returns (x : int);
var u : int;
let
  u = 1;
  automaton
  | INC -> x = if b then 1 else 0;
  | DEC -> x = -u;
  end;
tel;

node auto_simpl() returns (x : int);
let
  automaton
  | INC ->
    var u1 : int;
    let
      u1 = 1 + (0 fby u1);
      x = 0 fby x + u1;
    tel
    until x > 5 then DEC;
  | DEC ->
    var u2 : int;
    let
      u2 = 2;
      x = (0 fby x) - u2;
    tel
    until x < -10 continue INC;
  end;
tel;
  
node two_auto(b : bool) returns (x : int; y : int when b);
let
  automaton
  | INC -> x = 0 fby x + 1;
    until x > 5 then DEC;
  | DEC -> x = 0 fby x - 1;
    until x < -10 then INC;
  end;
  automaton
  | INC -> y = 0 fby y + 1;
    until y > 5 then DEC;
  | DEC -> y = 0 fby y - 1;
    until y < -10 then INC;
  end;
tel;

node auto_mult() returns (x : int; y : int);
let
  automaton
  | A ->
    var l : int;
    let
      l = 1;
      automaton
      | A1 ->
        x = 0 fby x + l;
        until x > 1 then A2;
      | A2 ->
        x = 0 fby x + (2 * l);
        until x > 7 then A1;
      end;
    tel;
    y = 0 fby y + 1;
    until y > 4 then B;
  | B ->
    x = 0 fby x - 5;
    y = 0 fby y - 1;
    until y < -1 then A;
  end;
tel;
  
node cumulative_sum(x : int) returns (y : int);
let
  y = x + (0 fby y);
tel;

node auto_app() returns (x : int);
let
  automaton
  | APP1 ->
    var v : int;
    let
      v = cumulative_sum(1);
      x = 0 fby v;
    tel;
    until x > 4 then APP2;
  | APP2 ->
    x = cumulative_sum(-2);
    until x < -6 then APP1;
  end;
tel;

node auto_unless() returns (x : int);
let
  automaton
  | INC ->
    unless (1 > 0) then INC;
    x = 2;
  end;
tel;
  
node auto_last() returns (y : int);
var last x : int = 0;
let
  automaton
  | INC ->
    x = (last x) + 1;
    until x > 5 then DEC;
  | DEC ->
    x = (last x) - 1;
    until x < -5 then INC;
  end;
  y = x;
tel;

node auto_last_reset() returns (y : int);
var last x : int = 0;
let
  automaton
  | AUT ->
    x = (last x) + 1;
    until x > 5 then AUT;
  end;
  y = x;
tel;
